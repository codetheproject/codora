#![feature(prelude_import)]
#![allow(dead_code, unused_variables)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[macro_use]
extern crate std;
use codora_util::new;
use codora_validator::Validate;
mod ___private {
    pub struct Foo<'a> {
        foo: &'a str,
    }
}
struct Dee {
    foo: String,
}
impl Dee {
    ///Constructs a new `Dee`.
    pub fn new(foo: String) -> Self {
        Dee { foo: foo }
    }
}
struct DeeValidationError<T> {
    foo: T,
}
const _: () = {
    use codora_validator as ___codora_validator;
    use std::borrow::Cow;
    impl ___codora_validator::IntoError
    for DeeValidationError<___codora_validator::ValidationError> {
        type Output = DeeValidationError<Option<Cow<'static, str>>>;
        fn into_error(self) -> Self::Output {
            ::core::panicking::panic("not yet implemented")
        }
    }
    impl ___codora_validator::Validate<()> for Dee {
        type Error = DeeValidationError<___codora_validator::ValidationError>;
        fn validate(&self, context: &()) -> core::result::Result<(), Self::Error> {
            ::core::panicking::panic("not yet implemented")
        }
    }
};
struct Gee {
    foo: String,
    #[validate(nested)]
    dee: Dee,
}
impl Gee {
    ///Constructs a new `Gee`.
    pub fn new(foo: String, dee: Dee) -> Self {
        Gee { foo: foo, dee: dee }
    }
}
struct GeeValidationError<T> {
    foo: T,
    dee: DeeValidationError<T>,
}
const _: () = {
    use codora_validator as ___codora_validator;
    use std::borrow::Cow;
    impl ___codora_validator::IntoError
    for GeeValidationError<___codora_validator::ValidationError> {
        type Output = GeeValidationError<Option<Cow<'static, str>>>;
        fn into_error(self) -> Self::Output {
            ::core::panicking::panic("not yet implemented")
        }
    }
    impl ___codora_validator::Validate<()> for Gee {
        type Error = GeeValidationError<___codora_validator::ValidationError>;
        fn validate(&self, context: &()) -> core::result::Result<(), Self::Error> {
            ::core::panicking::panic("not yet implemented")
        }
    }
};
#[validate(context = "___private::Foo<'a>", mutable)]
pub struct User {
    #[validate(nested)]
    gee: Gee,
    name: String,
    email: String,
    #[validate(nested)]
    dee: Dee,
}
impl User {
    ///Constructs a new `User`.
    pub fn new(gee: Gee, name: String, email: String, dee: Dee) -> Self {
        User {
            gee: gee,
            name: name,
            email: email,
            dee: dee,
        }
    }
}
pub struct UserValidationError<T> {
    name: T,
    email: T,
    gee: GeeValidationError<T>,
    dee: DeeValidationError<T>,
}
const _: () = {
    use codora_validator as ___codora_validator;
    use std::borrow::Cow;
    impl ___codora_validator::IntoError
    for UserValidationError<___codora_validator::ValidationError> {
        type Output = UserValidationError<Option<Cow<'static, str>>>;
        fn into_error(self) -> Self::Output {
            ::core::panicking::panic("not yet implemented")
        }
    }
    impl<'a> ___codora_validator::Validate<___private::Foo<'a>> for User {
        type Error = UserValidationError<___codora_validator::ValidationError>;
        fn validate(
            &self,
            context: &___private::Foo<'a>,
        ) -> core::result::Result<(), Self::Error> {
            ::core::panicking::panic("not yet implemented")
        }
    }
};
fn main() {}
